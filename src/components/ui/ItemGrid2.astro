---
import { Icon } from "astro-icon/components";
import { twMerge } from "tailwind-merge";
import type { ItemGrid } from "~/types";
import Button from "./Button.astro";

const {
  items = [],
  columns,
  defaultIcon = "",
  classes = {},
} = Astro.props as ItemGrid;

const {
  container: containerClass = "",
  // container: containerClass = "sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3",
  panel: panelClass = "",
  title: titleClass = "",
  description: descriptionClass = "",
  icon: defaultIconClass = "text-primary",
} = classes;
---

{
  items && (
    <div
      class={twMerge(
        `grid gap-8 gap-x-12 sm:gap-y-8 ${
          columns === 4
            ? "lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2"
            : columns === 3
            ? "lg:grid-cols-3 sm:grid-cols-2"
            : columns === 2
            ? "sm:grid-cols-2 "
            : ""
        }`,
        containerClass
      )}
    >
      {items.map(
        ({
          title,
          description,
          icon,
          callToAction,
          classes: itemClasses = {},
        }) => (
          <div
            class={twMerge(
              "relative flex p-5 sm:p-6 lg:p-8 flex-col overflow-hidden",
              panelClass,
              itemClasses?.panel
            )}
          >
            {(icon || defaultIcon) && (
              <div class="rounded-xl bg-gray-300 mb-7 dark:bg-orange-500 p-3 text-heading-1 w-max relative">
    <span>
      <img src={icon || defaultIcon} alt=`Logo ${title}` class=" w-10 h-auto" />
              </span>
  </div>

             
            )}
            <div
              class={twMerge(
                "text-lg md:text-xl font-semibold text-heading-2",
                titleClass,
                itemClasses?.title
              )}
            >
              {title}
            </div>
            {description && (
              <p
                class={twMerge(
                  "text-lg leading-7 mt-4",
                  descriptionClass,
                  itemClasses?.description
                )}
                set:html={description}
              />
            )}
            {callToAction && (
              <div class="mt-2">
                <Button {...callToAction} />
              </div>
            )}<span class="absolute w-32 aspect-square -bottom-16 -right-16 bg-[#ff64311a]/10 rounded-full"></span>

          </div>
        )
      )}
    </div>
  )
}
